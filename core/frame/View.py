# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'View.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtCore import QPoint
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import *
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5 import QtCore
from shapely.geometry import Point


class Ui_Dialog(object):

    def __init__(self):
        self.label = None
        self.vbox = None
        self.canvas = None
        self.fig = None
        self.pixmap = None
        self.data = None
        self.ax = None
        self.geograph = None
        self.last_clicked = None

    def setupUi(self, Dialog, geograph, data):
        self.last_clicked = None
        self.data = data
        Dialog.setObjectName("Dialog")
        Dialog.resize(618, 415)
        # 创建一个 FigureCanvas 对象
        self.ax = geograph
        self.fig = self.ax.get_figure()
        self.canvas = FigureCanvas(self.fig)
        self.fig.patch.set_facecolor('#ECECEC')
        self.canvas.resize(351, 371)
        #self.canvas.setStyleSheet("background-color: black;")
        print(self.canvas.size())
        self.label = QLabel(Dialog)
        #self.label.setStyleSheet("background-color: black;")
        self.label.setGeometry(QtCore.QRect(260, 20, 351, 371))
        #print(self.label.size())
        # self.label.setScaledContents(True)
        # # 创建一个 QVBoxLayout 实例，并将 QLabel 添加到该布局中
        # self.vbox = QVBoxLayout()
        # self.vbox.addWidget(self.label)
        # self.setLayout(self.vbox)

        # 将地图绘制到 QLabel 上
        self.canvas = FigureCanvas(self.fig)
        self.canvas.setParent(self.label)
        #self.label.setScaledContents(True)
        # 将鼠标点击事件处理函数注册到地图对象上
        self.canvas.mpl_connect('button_press_event', self.onclick)
        # # 将鼠标点击事件处理函数注册到地图对象上
        # #self.canvas.mpl_connect('button_press_event', self.onclick)
        # print('run')
        # # 将 FigureCanvas 转换为 QPixmap
        # self.pixmap = QPixmap(self.canvas.grab())
        #
        # # 创建一个 QLabel 对象，并将 QPixmap 对象用作其背景
        # self.label = QLabel(Dialog)
        # self.label.setStyleSheet("background-color: white;")
        # self.label.setGeometry(QtCore.QRect(140, 20, 351, 371))

        # self.canvas.setParent(self.label)
        # # # 创建一个 FigureCanvas 对象和 Axes 对象
        # # canvas = FigureCanvas(self.fig)
        #
        # # 将 FigureCanvas 对象绑定到 PyQt 窗口中
        # self.setCentralWidget(canvas)
        #
        # # 绑定 FigureCanvas 的鼠标事件
        # canvas.mpl_connect('button_press_event', lambda event: self.on_mouse_pressed(event, label, ax))

        #self.label.mousePressEvent = lambda event: self.onclick(event, self.label, self.ax)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "View"))
        #self.label.setText(_translate("Dialog", ""))

    # 定义鼠标点击事件处理函数
    def onclick(self, event):

        # 获取鼠标点击位置的坐标
        x, y = event.xdata, event.ydata
        print("Clicked at x_canvas=%s, y_canvas=%s" % (x, y))
        # 如果点击的位置在地图外，则返回
        if x is None or y is None:
            return
        #clicked = None
        # 获取被点击的区域
        clicked = self.data[self.data.geometry.contains(Point(x, y))]
        print(clicked)
        # 如果没有点击到任何区域，则返回
        if clicked.empty:
            return

        # 清除之前的高亮区域
        if self.last_clicked is not None:
            self.last_clicked.plot(ax=self.ax, edgecolor='#D6D8D7', facecolor='#D5CDC2')

        # 高亮被点击的区域
        clicked.plot(ax=self.ax, edgecolor='grey', facecolor='#BCA080')

        # 保存当前点击的区域
        self.last_clicked = clicked